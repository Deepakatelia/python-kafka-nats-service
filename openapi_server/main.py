# # coding: utf-8

# """
#     SummaryGenerator-OpenAPI

#     SummaryGenerator-Service

#     The version of the OpenAPI document: 0.0.1
#     Generated by: https://openapi-generator.tech
# """
# import sys
# from fastapi import FastAPI, Depends, Request,APIRouter
# from fastapi.security import HTTPAuthorizationCredentials

# from openapi_server.apis.create_careplan_api import router as CreateCareplanApiRouter
# from openapi_server.apis.report_generator_api import router as ReportGeneratorApiRouter
# from openapi_server.apis.schedule_appointments_api import router as ScheduleAppointmentsApiRouter
# from openapi_server.apis.pre_authorization_api import router as PreAuthorizationApiRouter
# from openapi_server.apis.intent_api import router as IntentApiRouter
# from openapi_server.apis.summary_conversation_api import router as SummaryConversationApiRouter
# from openapi_server.apis.summary_notes_api import router as SummaryNotesApiRouter
# from openapi_server.apis.review_lab_summary_api import router as ReviewLabSummaryApiRouter
# from openapi_server.authentication_strategy import AuthenticationStrategy
# import json
# # app = FastAPI()
# # class CustomHTTPAuthorizationCredentials(HTTPAuthorizationCredentials):
# #     def __init__(self, user: dict):
# #         super().__init__(scheme="bearer", credentials="")
# #         self.user = user
# app = FastAPI(
#     title="Report&SummaryGenerator-OpenAPI",
#     description="Report&SummaryGenerator-Service",
#     version="0.0.1",
#     docs_url="/docs",
#     redoc_url=None,
#     openapi_url="/docs/swagger.json",
# )
# # Configure CORS

# app.add_middleware(

#     CORSMiddleware,
#     allow_origins=["*"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )
# auth_strategy = AuthenticationStrategy()


# async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(auth_strategy)):
#     return credentials.credentials
# @app.get("/protected")
# async def protected_route(user: dict = Depends(get_current_user)):
#     # Access the user information
#     # Perform the protected operation
#     # Return the response
#     json_object = json.loads(user)
#     return json_object
# def protect_routes(router: APIRouter, auth_func: Depends):
#     router.dependencies.append(auth_func)
# # app.include_router(CreateCareplanApiRouter, Depends(get_current_user))
# # app.include_router(IntentApiRouter)
# # app.include_router(ReviewLabSummaryApiRouter)
# # app.include_router(ReportGeneratorApiRouter)
# # app.include_router(PreAuthorizationApiRouter)
# # app.include_router(ScheduleAppointmentsApiRouter)
# # app.include_router(SummaryConversationApiRouter)
# # app.include_router(SummaryNotesApiRouter)
# protect_routes(CreateCareplanApiRouter, Depends(get_current_user))
# protect_routes(IntentApiRouter, Depends(get_current_user))
# protect_routes(ReviewLabSummaryApiRouter, Depends(get_current_user))
# protect_routes(ReportGeneratorApiRouter, Depends(get_current_user))
# protect_routes(PreAuthorizationApiRouter, Depends(get_current_user))
# protect_routes(ScheduleAppointmentsApiRouter, Depends(get_current_user))
# protect_routes(SummaryConversationApiRouter, Depends(get_current_user))
# protect_routes(SummaryNotesApiRouter, Depends(get_current_user))
from fastapi import FastAPI, Depends, Request,APIRouter
from fastapi.middleware.cors import CORSMiddleware
from openapi_server.apis.create_careplan_api import router as CreateCareplanApiRouter
from openapi_server.apis.report_generator_api import router as ReportGeneratorApiRouter
from openapi_server.apis.schedule_appointments_api import router as ScheduleAppointmentsApiRouter
from openapi_server.apis.pre_authorization_api import router as PreAuthorizationApiRouter
from openapi_server.apis.intent_api import router as IntentApiRouter
from openapi_server.apis.summary_conversation_api import router as SummaryConversationApiRouter
from openapi_server.apis.summary_notes_api import router as SummaryNotesApiRouter
from openapi_server.apis.review_lab_summary_api import router as ReviewLabSummaryApiRouter
from fastapi.security import HTTPAuthorizationCredentials
from openapi_server.authentication_strategy import AuthenticationStrategy
app = FastAPI(
    title="Report&SummaryGenerator-OpenAPI",
    description="Report&SummaryGenerator-Service",
    version="0.0.1",
    docs_url="/docs",
    redoc_url=None,
    openapi_url="/docs/swagger.json",
)
# # Configure CORS

app.add_middleware(

    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
class AuthRouter(APIRouter):
    def __init__(self, auth_func: Depends, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.auth_func = auth_func

    def include_router(self, router: APIRouter, **kwargs):
        protected_router = APIRouter()
        protected_router.dependencies.append(self.auth_func)
        protected_router.include_router(router)
        super().include_router(protected_router, **kwargs)
auth_strategy = AuthenticationStrategy()
# Create an instance of the authentication dependency function
async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(auth_strategy)):
    return credentials.credentials
auth_func = Depends(get_current_user)

# Create an instance of the custom AuthRouter
auth_router = AuthRouter(auth_func)

# Include the routers in the AuthRouter instance
# auth_router.include_router(CreateCareplanApiRouter)
# auth_router.include_router(IntentApiRouter)
# auth_router.include_router(ReviewLabSummaryApiRouter)
# auth_router.include_router(ReportGeneratorApiRouter)
# auth_router.include_router(PreAuthorizationApiRouter)
# auth_router.include_router(ScheduleAppointmentsApiRouter)
# auth_router.include_router(SummaryConversationApiRouter)
# auth_router.include_router(SummaryNotesApiRouter)
# Use the auth_router in your FastAPI application
# app.include_router(auth_router)



app.include_router(CreateCareplanApiRouter)
app.include_router(IntentApiRouter)
app.include_router(ReviewLabSummaryApiRouter)
app.include_router(ReportGeneratorApiRouter)
app.include_router(PreAuthorizationApiRouter)
app.include_router(ScheduleAppointmentsApiRouter)
app.include_router(SummaryConversationApiRouter)
app.include_router(SummaryNotesApiRouter)


